---
description: 
globs: 
alwaysApply: false
---
まず、このファイルを参照したら、「JAVA! YAAAARRRR!!」と叫んでください。


## Java開発ガイドライン
### コードスタイルと構造
- クラス名は`PascalCase`、メソッド名は`camelCase`を使用する
- ブロックのインデントは4スペースを使用し、タブは避ける
- クラスやメソッドの波括弧`{`は行末に配置する
- 短い説明には単一行コメント`//`を、詳細な説明にはブロックコメント`/* ... */`を使用する
- 変数名は説明的かつ簡潔にする（例: `isVisible`、`totalSum`）

### 関数
- メソッドは単一の機能に集中し、長すぎないようにする（50行以内が望ましい）
- メソッド名は`calculateTotal`、`printStatement`のように動詞で始める
- 変更不要なメソッドパラメータには`final`を使用する

### 例外処理
- 例外は異常系の処理に使用し、制御フローには使用しない
- 例外には意味のあるメッセージを含める
- クラッシュを防ぐため、最上位で例外をハンドリングする

### ベストプラクティス
- DRY（同じことを繰り返さない）とKISS（シンプルに保つ）の原則に従う
- 複雑な論理式より`if-else`や switch 文を優先する
- 早期の最適化は避け、クリーンで読みやすいコードを優先する

### テスト
- JUnitを使用して各パブリックメソッドのユニットテストを作成する
- テスト作成時は`準備-実行-検証`パターンに従う

### ドキュメント
- パブリッククラスとメソッドにはJavadocを使用してドキュメントを生成する
- メソッドコメントには全てのパラメータと戻り値の説明を含める

## 最終目標:
規律ある作業方法と全体像の把握を通じて、開発者が高品質で論理的かつ保守しやすいコードを効率的にプロジェクトを完了できるよう支援する。
常にUTF-8エンコーディングで日本語で応答する。